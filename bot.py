from dotenv import load_dotenv
load_dotenv()

import os
import sqlite3
import threading
import time
import json
import urllib.parse
import requests
import logging

import telebot
from telebot import types
from flask import Flask, request

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

BOT_TOKEN = "8302142533:AAFubqIIS3JBg4DeQxZW7mom0MsYYUSJsE8"
WEBHOOK_URL = "https://anilife-bot.onrender.com" 
SITE_SEARCH_BASE = "https://anilifetv.vercel.app/relizes?search="

if not BOT_TOKEN:
    logging.error("BOT_TOKEN is not set. Exiting.")
    raise SystemExit("Set BOT_TOKEN")

bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')

DB_PATH = os.environ.get("DB_PATH", "bot_subs.db")
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()
cur.execute("""
CREATE TABLE IF NOT EXISTS subs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    query TEXT NOT NULL,
    last_ids TEXT
)
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    action TEXT,
    created_at INTEGER DEFAULT (strftime('%s','now'))
)
""")
conn.commit()

cache = {}

HELP_TEXT = (
    "üëã <b>AniLife_tv</b>\n\n"
    "–Ø –º–æ–≥—É –∏—Å–∫–∞—Ç—å –∞–Ω–∏–º–µ, –¥–∞–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤–∏–Ω–∫–∏.\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/new <–Ω–∞–∑–≤–∞–Ω–∏–µ?> ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã (—Å—Å—ã–ª–∫–∞)\n"
    "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n"
    "/remove <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
    "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏\n"
    "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π\n"
    "/random ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–π—Ç–ª\n"
    "/play <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
    "/webapp ‚Äî –æ—Ç–∫—Ä—ã—Ç—å WebApp –≤–Ω—É—Ç—Ä–∏ Telegram\n"
    "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
)

def make_site_link(query: str) -> str:
    q = str(query or "").strip()
    return SITE_SEARCH_BASE + urllib.parse.quote_plus(q)

def log_history(user_id: int, action: str):
    try:
        cur.execute("INSERT INTO history(user_id, action) VALUES(?,?)", (user_id, action))
        conn.commit()
    except Exception:
        logging.exception("log_history failed")

def send_search_result(chat_id: int, query: str, label: str = None):
    """–ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è /play –∏ /find ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏."""
    q = (query or "").strip()
    if not q:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    url = make_site_link(q)
    title = f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ: <b>{q}</b>"

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", url="https://anilifetv.vercel.app/"),
        types.InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp", url="https://anilifetv.vercel.app/")
    )
    kb.add(types.InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ –≤ —á–∞—Ç–µ", switch_inline_query_current_chat=q))

    bot.send_message(chat_id, f"{title}\n\n–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=kb, disable_web_page_preview=False)
    log_history(chat_id, f"{label or '/find'} {q}")

@bot.message_handler(commands=['start', 'help'])
def cmd_start_help(message):
    bot.send_message(message.chat.id, HELP_TEXT)
    log_history(message.chat.id, "/start/help")

@bot.message_handler(commands=['webapp'])
def cmd_webapp(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å WebApp üöÄ", web_app=types.WebAppInfo("https://anilifetv.vercel.app/")))
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp –≤–Ω—É—Ç—Ä–∏ Telegram.", reply_markup=kb)
    log_history(message.chat.id, "/webapp")

@bot.message_handler(commands=['play'])
def cmd_play(message):
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /play <–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    query = parts[1].strip()
    send_search_result(message.chat.id, query, label="/play")

@bot.message_handler(commands=['new'])
def cmd_new(message):
    parts = (message.text or "").split(maxsplit=1)
    query = parts[1].strip() if len(parts) > 1 else ""
    url = make_site_link(query)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üì• –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–ª–∏–∑—ã", url=url))
    bot.send_message(message.chat.id, f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ª–∏–∑—ã –ø–æ ¬´{query or '–≤—Å–µ–º—É'}':", reply_markup=kb)
    log_history(message.chat.id, f"/new {query}")

@bot.message_handler(commands=['add'])
def cmd_add(message):
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    query = parts[1].strip()
    cur.execute("INSERT INTO subs(user_id, query, last_ids) VALUES(?,?,?)", (message.chat.id, query, json.dumps([])))
    conn.commit()
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ¬´{query}¬ª —Å–æ–∑–¥–∞–Ω–∞.")
    log_history(message.chat.id, f"/add {query}")

@bot.message_handler(commands=['remove'])
def cmd_remove(message):
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    query = parts[1].strip()
    cur.execute("DELETE FROM subs WHERE user_id=? AND query=?", (message.chat.id, query))
    conn.commit()
    bot.send_message(message.chat.id, f"‚ùå –û—Ç–ø–∏—Å–∞–Ω(–∞) –æ—Ç ¬´{query}¬ª.")
    log_history(message.chat.id, f"/remove {query}")

@bot.message_handler(commands=['list'])
def cmd_list(message):
    cur.execute("SELECT query FROM subs WHERE user_id=?", (message.chat.id,))
    rows = cur.fetchall()
    if not rows:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
        return
    bot.send_message(message.chat.id, "üìù –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join(f"- {r[0]}" for r in rows))
    log_history(message.chat.id, "/list")

@bot.message_handler(commands=['history'])
def cmd_history(message):
    cur.execute("SELECT action, created_at FROM history WHERE user_id=? ORDER BY id DESC LIMIT 30", (message.chat.id,))
    rows = cur.fetchall()
    if not rows:
        bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è.")
        return
    txt = "\n".join(f"{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(r[1]))}: {r[0]}" for r in rows)
    bot.send_message(message.chat.id, txt)

@bot.message_handler(commands=['random'])
def cmd_random(message):
    url = "https://anilifetv.vercel.app/random"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üé≤ –û—Ç–∫—Ä—ã—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–π—Ç–ª", url=url))
    bot.send_message(message.chat.id, "–°–ª—É—á–∞–π–Ω—ã–π —Ç–∞–π—Ç–ª:", reply_markup=kb)
    log_history(message.chat.id, "/random")

@bot.message_handler(func=lambda m: True)
def text_handler(message):
    text = (message.text or "").strip()
    if not text:
        return
    if text.startswith("/"):
        return
    kb = types.InlineKeyboardMarkup()
    url = make_site_link(text)
    kb.add(
        types.InlineKeyboardButton("üîé –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", url=url),
        types.InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å WebApp", url="https://anilifetv.vercel.app/")
    )
    bot.send_message(message.chat.id, f"–ù–∞–π—Ç–∏ <b>{text}</b> ‚Äî –æ—Ç–∫—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ.", reply_markup=kb)
    log_history(message.chat.id, f"search {text}")

def check_subs_loop(interval=1800):
    while True:
        try:
            cur.execute("SELECT id,user_id,query,last_ids FROM subs")
            rows = cur.fetchall()
            for sid, user_id, query, last_ids_json in rows:
                url = make_site_link(query)
                try:
                    bot.send_message(user_id, f"üîî –ù–æ–≤–æ–µ (–∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ) —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ¬´{query}¬ª: {url}")
                except Exception:
                    logging.exception("notify err")
                cur.execute("UPDATE subs SET last_ids=? WHERE id=?", (json.dumps([query]), sid))
                conn.commit()
        except Exception:
            logging.exception("subs loop err")
        time.sleep(interval)

threading.Thread(target=check_subs_loop, args=(1800,), daemon=True).start()

app = Flask(__name__)

@app.route("/" + BOT_TOKEN, methods=['POST'])
def receive_update():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return "ok", 200

@app.route("/set_webhook", methods=['GET'])
def set_webhook():
    try:
        bot.remove_webhook()
        url = WEBHOOK_URL.rstrip('/') + '/' + BOT_TOKEN
        success = bot.set_webhook(url=url)
        return ("Webhook set" if success else "Webhook failed"), 200
    except Exception:
        logging.exception("set_webhook error")
        return "error", 500

@app.route("/")
def index():
    return "Bot is running", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    logging.info(f"Starting app on 0.0.0.0:{port}")
    app.run(host="0.0.0.0", port=port)